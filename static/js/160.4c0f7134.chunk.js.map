{"version":3,"file":"static/js/160.4c0f7134.chunk.js","mappings":"4LACA,SAAgB,cAAgB,4BAA4B,SAAW,uBAAuB,SAAW,uBAAuB,UAAY,wBAAwB,SAAW,wB,aCK/K,MAuDA,EAnDaA,KACX,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAkBnC,OAhBAK,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,IAAgBZ,GACvCG,EAAQQ,EAAST,MAAQ,GAC3B,CAAE,MAAOW,GACPL,EAAS,qCACTM,QAAQP,MAAM,gCAAiCM,EACjD,CAAC,QACCP,GAAW,EACb,GAGFS,EAAW,GACV,CAACf,IAEAK,GACKW,EAAAA,EAAAA,KAAA,KAAAC,SAAG,eAGRV,GACKS,EAAAA,EAAAA,KAAA,KAAAC,SAAIV,IAGO,IAAhBL,EAAKgB,QACAF,EAAAA,EAAAA,KAAA,KAAGG,UAAWC,EAAOC,WAAWJ,SAAC,oCAIxCD,EAAAA,EAAAA,KAAA,MAAIG,UAAWC,EAAOE,SAASL,SAC5Bf,EAAKqB,KAAIC,IACRC,EAAAA,EAAAA,MAAA,MAAmBN,UAAWC,EAAOM,SAAST,SAAA,EAC5CD,EAAAA,EAAAA,KAAA,OACEW,IAAKH,EAAMI,aAAgB,kCAAmBJ,EAAMI,eAzChD,4BA0CJC,IAAKL,EAAMM,KACXX,UAAWC,EAAOW,aAEpBf,EAAAA,EAAAA,KAAA,KAAAC,UAAGD,EAAAA,EAAAA,KAAA,UAAAC,SAASO,EAAMM,UAClBL,EAAAA,EAAAA,MAAA,KAAAR,SAAA,CAAG,MAAIO,EAAMQ,eAPNR,EAAMS,OAUd,C,+ECzDT,MAAMC,EAAU,mCACVC,EAAW,+BAEXC,EAAiB1B,UACrB,IAAK2B,EAASC,GACZ,MAAM,IAAIC,MAAO,UAASF,EAASG,UAAUH,EAASI,cAExD,OAAOJ,EAASK,MAAM,EAGXC,EAAcjC,iBACzB,MAAMkC,EAAO,GAAET,2BAAkCD,UADbW,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAEjCR,QAAiBU,MAAMH,GAC7B,OAAOR,EAAeC,EACxB,EAEaW,EAAsBtC,iBACjC,MAAMkC,EAAO,GAAET,8BAAqCD,UADRW,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAEzCR,QAAiBU,MAAMH,GAC7B,OAAOR,EAAeC,EACxB,EAEaY,EAAevC,eAAOwC,GACjC,MAAMN,EAAO,GAAET,0BAAiCD,WAAiBgB,UADrBL,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAEzCR,QAAiBU,MAAMH,GAC7B,OAAOR,EAAeC,EACxB,EAEac,EAAkBzC,UAC7B,MAAMkC,EAAO,GAAET,WAAkBnC,aAAmBkC,IAC9CG,QAAiBU,MAAMH,GAC7B,OAAOR,EAAeC,EAAS,EAGpBzB,EAAkBF,UAC7B,MAAMkC,EAAO,GAAET,WAAkBnC,qBAA2BkC,IACtDG,QAAiBU,MAAMH,GAC7B,OAAOR,EAAeC,EAAS,EAGpBe,EAAkB1C,eAAOV,GACpC,MAAM4C,EAAO,GAAET,WAAkBnC,qBAA2BkC,UADXW,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAE9CR,QAAiBU,MAAMH,GAC7B,OAAOR,EAAeC,EACxB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast.module.css?f72c","components/Cast.jsx","components/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castContainer\":\"Cast_castContainer__ZQNq1\",\"castList\":\"Cast_castList__aP658\",\"castItem\":\"Cast_castItem__Hn3OX\",\"castImage\":\"Cast_castImage__NcSn2\",\"castName\":\"Cast_castName__l95OZ\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from './api'; \nimport styles from './Cast.module.css';\n\n\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst noImage = 'path/to/default/image.jpg'; \n\nconst Cast = () => {\n  const { movieId } = useParams(); \n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const castData = await getMovieCredits(movieId); \n        setCast(castData.cast || []); \n      } catch (err) {\n        setError('Failed to fetch cast information.');\n        console.error('Failed to fetch cast details:', err);\n      } finally {\n        setLoading(false); \n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  if (loading) {\n    return <p>Loading...</p>; \n  }\n\n  if (error) {\n    return <p>{error}</p>; \n  }\n\n  if (cast.length === 0) {\n    return <p className={styles.noCastInfo}>No cast information available.</p>; \n  }\n\n  return (\n    <ul className={styles.castList}>\n      {cast.map(actor => (\n        <li key={actor.id} className={styles.castItem}>\n          <img\n            src={actor.profile_path ? `${IMAGE_BASE_URL}${actor.profile_path}` : noImage}\n            alt={actor.name}\n            className={styles.castImage}\n          />\n          <p><strong>{actor.name}</strong></p>\n          <p>as {actor.character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;","const API_KEY = '55aa6ae40b9f98b84693daf1163a8814';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    throw new Error(`Error: ${response.status} ${response.statusText}`);\n  }\n  return response.json();\n};\n\nexport const fetchMovies = async (page = 1) => {\n  const url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&page=${page}`;\n  const response = await fetch(url);\n  return handleResponse(response);\n};\n\nexport const fetchTrendingMovies = async (page = 1) => {\n  const url = `${BASE_URL}/trending/all/day?api_key=${API_KEY}&page=${page}`;\n  const response = await fetch(url);\n  return handleResponse(response);\n};\n\nexport const searchMovies = async (query, page = 1) => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`;\n  const response = await fetch(url);\n  return handleResponse(response);\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`;\n  const response = await fetch(url);\n  return handleResponse(response);\n};\n\nexport const getMovieCredits = async (movieId) => {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n  const response = await fetch(url);\n  return handleResponse(response);\n};\n\nexport const getMovieReviews = async (movieId, page = 1) => {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&page=${page}`;\n  const response = await fetch(url);\n  return handleResponse(response);\n};"],"names":["Cast","movieId","useParams","cast","setCast","useState","loading","setLoading","error","setError","useEffect","async","castData","getMovieCredits","err","console","fetchCast","_jsx","children","length","className","styles","noCastInfo","castList","map","actor","_jsxs","castItem","src","profile_path","alt","name","castImage","character","id","API_KEY","BASE_URL","handleResponse","response","ok","Error","status","statusText","json","fetchMovies","url","arguments","undefined","fetch","fetchTrendingMovies","searchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}